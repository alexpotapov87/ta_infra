pipeline {  
    environment {
        registry = "alexpotapov87"
        registryCredential = 'dockerhub'
        dockerImageNginx = 'alexpotapov87/ta_nginx'
        dockerImageProm = 'alexpotapov87/ta_prom'
        dockerImageJen = 'alexpotapov87/jenkins_ta'
        WORKSPACE = '/var/jenkins_home/workspace/ta_infra'
        BUILD_ID = ''
        shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
    }  
  agent any
  
  stages {
    stage('Cloning Git') {
      steps {
        git 'https://github.com/alexpotapov87/ta_infra'
            }
        }

    stage('Building image') {
      steps{
        script {
          dir ('/var/jenkins_home/workspace/ta_infra/nginx') {
              sh 'docker build -t $dockerImageNginx:$shortCommit -t $dockerImageNginx:latest .'
          }            
          dir ('/var/jenkins_home/workspace/ta_infra/prometheus') {
              sh 'docker build -t $dockerImageProm:$shortCommit -t $dockerImageProm:latest .'
          }            
          dir ('/var/jenkins_home/workspace/ta_infra/jenkins') {
              sh 'docker build -t $dockerImageJen:$shortCommit -t $dockerImageJen:latest .'
          }            
            }
        }
    }

    stage('Pushing image') {
      steps{
        withDockerRegistry([ credentialsId: "dockerhub", url: "" ]) { 
          sh 'docker push $dockerImageNginx'
          sh 'docker push $dockerImageProm'
          sh 'docker push $dockerImageJen'
          }            
            }
        }

    stage('Remove Unused docker image') {
      steps{
        sh "docker rmi $dockerImageNginx:$shortCommit"
        sh "docker rmi $dockerImageProm:$shortCommit"
          }
        }

    stage('Deploing to minikube') {
      steps{
        script {
          try {
            sh "kubectl delete deploy --all -n dev"
            sh "kubectl delete svc --all -n dev"

          } catch (err) {
            echo "No web deployment found, continuing"
          }
          sh "kubectl apply -f kubernetes/. -n dev"
            }
           }
        }

  }
}
